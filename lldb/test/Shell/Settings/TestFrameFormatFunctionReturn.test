# Test the ${function.return-left} and ${function.return-right}
# frame-format variables.

# RUN: split-file %s %t
# RUN: %build %t/main.cpp -o %t.out
# RUN: %lldb -o "settings set interpreter.stop-command-source-on-error false" \
# RUN:       -x -b -s %t/commands.input %t.out -o exit 2>&1 \
# RUN:       | FileCheck %s
#
# Check that we have an appropriate fallback for languages that
# don't implement this frame format variable (in this case Objective-C).
#
# RUN: %build %t/main.m -o %t.objc.out
# RUN: %lldb -x -b -s %t/commands.input %t.objc.out -o exit 2>&1 \
# RUN:       | FileCheck %s --check-prefix=CHECK-OBJC

#--- main.cpp
namespace ns::ns2 {
template<typename T>
struct Foo {};

template<typename T>
Foo<int> qux(int) {
  return {};
}

template<typename T>
Foo<int> (*bar(Foo<float>))(int) {
  qux<T>(5);
  return qux<T>;
}

struct Bar {
  template<typename T>
  Foo<int> (* (*foo(int) const &&)(Foo<float>))(int) {
    bar<T>(Foo<float>{});
    return bar<T>;
  }
};
}

int main(int argc, char const *argv[]) {
    ns::ns2::Bar{}.foo<int>(5);
    return 0;
}

#--- main.m

int qux() {}
int bar() { qux(); }

int main() { return bar(); }

#--- commands.input
settings set -f frame-format "custom-frame '${function.return-left}'\n"
break set -n qux

run
bt

# CHECK: custom-frame 'ns::ns2::Foo<int> '
# CHECK: custom-frame 'ns::ns2::Foo<int> (*'
# CHECK: custom-frame 'ns::ns2::Foo<int> (* (*'

# CHECK-OBJC: bt
# CHECK-OBJC-NOT: custom-frame

settings set -f frame-format "other-frame '${function.return-right}'\n"
bt

# CHECK: other-frame ''
# CHECK: other-frame ')(int)'
# CHECK: other-frame ')(ns::ns2::Foo<float>))(int)'

# CHECK-OBJC: bt
# CHECK-OBJC-NOT: other-frame
