# Test the ${function.basename} frame-format variable.

# RUN: split-file %s %t
# RUN: %build %t/main.cpp -o %t.out
# RUN: %lldb -o "settings set interpreter.stop-command-source-on-error false" \
# RUN:       -x -b -s %t/commands.input %t.out -o exit 2>&1 \
# RUN:       | FileCheck %s
#
# Check that we have an appropriate fallback for languages that
# don't implement this frame format variable (in this case Objective-C).
#
# RUN: %build %t/main.m -o %t.objc.out
# RUN: %lldb -x -b -s %t/commands.input %t.objc.out -o exit 2>&1 \
# RUN:       | FileCheck %s --check-prefix=CHECK-OBJC

#--- main.cpp
namespace ns {
template<typename T>
struct Bar {
  template<typename K>
  T bar(K k) const & { return 1.0f; }
};

template<typename T>
struct Foo {
  template<typename K>
  [[gnu::abi_tag("Test")]] void foo() const volatile && {
    Bar<float> b;
    b.bar(b);
  }
};

template<typename T>
T func() {
  ns::Foo<int>{}.foo<int>();
  return T{};
}
} // namespace ns

int main() {
  ns::func<ns::Foo<int>>();
  return 0;
}

#--- main.m

int func() {}
int bar() { func(); }

int main() { return bar(); }

#--- commands.input
settings set -f frame-format "custom-frame '${function.basename}'\n"
break set -n bar

run
bt

# CHECK: custom-frame 'bar'
# CHECK: custom-frame 'foo[abi:Test]'
# CHECK: custom-frame 'func'

# CHECK-OBJC: bt
# CHECK-OBJC-NOT: custom-frame
