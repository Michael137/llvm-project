# Test the ${plugin.cplusplus.language.frame-format} setting.

# RUN: split-file %s %t
# RUN: %build %t/main.cpp -o %t.out
# RUN: %lldb -o "settings set interpreter.stop-command-source-on-error false" \
# RUN:       -x -b -s %t/commands.input %t.out -o exit 2>&1 \
# RUN:       | FileCheck %s
#
# RUN: %build %t/main.m -o %t.objc.out
# RUN: %lldb -x -b -s %t/commands.input %t.objc.out -o exit 2>&1 \
# RUN:       | FileCheck %s --check-prefix=CHECK-OBJC

#--- main.cpp
namespace ns::ns2 {
void custom(int x) asm("_Zinvalid_mangling");
void custom(int x) {}

void bar() { custom(5); }
void foo() { bar(); }
}

int main(int argc, char const *argv[]) {
    ns::ns2::foo();
    return 0;
}

#--- main.m

int func(int x) {}
int bar(int y) { func(y); }

int main() { return bar(10); }

#--- commands.input
settings set plugin.cplusplus.language.frame-format "${function.scope}${function.basename}"
settings set -f frame-format "custom-frame '${function.name-with-args}'\n"
break set -l 3

run
bt

# CHECK: custom-frame '_Zinvalid_mangling(x=5)'
# CHECK: custom-frame 'ns::ns2::bar'
# CHECK: custom-frame 'ns::ns2::foo'

settings set plugin.cplusplus.language.frame-format "this affects C++ only"
bt

# CHECK-OBJC: bt
# CHECK-OBJC: bt
# CHECK-OBJC: custom-frame 'bar(y=10)'
